// Code generated by protoc-gen-go. DO NOT EDIT.
// source: streamservice.proto

package streamservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StreamBytes struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamBytes) Reset()         { *m = StreamBytes{} }
func (m *StreamBytes) String() string { return proto.CompactTextString(m) }
func (*StreamBytes) ProtoMessage()    {}
func (*StreamBytes) Descriptor() ([]byte, []int) {
	return fileDescriptor_947145fe71e22c38, []int{0}
}

func (m *StreamBytes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamBytes.Unmarshal(m, b)
}
func (m *StreamBytes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamBytes.Marshal(b, m, deterministic)
}
func (m *StreamBytes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamBytes.Merge(m, src)
}
func (m *StreamBytes) XXX_Size() int {
	return xxx_messageInfo_StreamBytes.Size(m)
}
func (m *StreamBytes) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamBytes.DiscardUnknown(m)
}

var xxx_messageInfo_StreamBytes proto.InternalMessageInfo

func (m *StreamBytes) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type DomainReq struct {
	Domain               string   `protobuf:"bytes,1,opt,name=Domain,proto3" json:"Domain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DomainReq) Reset()         { *m = DomainReq{} }
func (m *DomainReq) String() string { return proto.CompactTextString(m) }
func (*DomainReq) ProtoMessage()    {}
func (*DomainReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_947145fe71e22c38, []int{1}
}

func (m *DomainReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DomainReq.Unmarshal(m, b)
}
func (m *DomainReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DomainReq.Marshal(b, m, deterministic)
}
func (m *DomainReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainReq.Merge(m, src)
}
func (m *DomainReq) XXX_Size() int {
	return xxx_messageInfo_DomainReq.Size(m)
}
func (m *DomainReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainReq.DiscardUnknown(m)
}

var xxx_messageInfo_DomainReq proto.InternalMessageInfo

func (m *DomainReq) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

type IPRespose struct {
	IP                   string   `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPRespose) Reset()         { *m = IPRespose{} }
func (m *IPRespose) String() string { return proto.CompactTextString(m) }
func (*IPRespose) ProtoMessage()    {}
func (*IPRespose) Descriptor() ([]byte, []int) {
	return fileDescriptor_947145fe71e22c38, []int{2}
}

func (m *IPRespose) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPRespose.Unmarshal(m, b)
}
func (m *IPRespose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPRespose.Marshal(b, m, deterministic)
}
func (m *IPRespose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPRespose.Merge(m, src)
}
func (m *IPRespose) XXX_Size() int {
	return xxx_messageInfo_IPRespose.Size(m)
}
func (m *IPRespose) XXX_DiscardUnknown() {
	xxx_messageInfo_IPRespose.DiscardUnknown(m)
}

var xxx_messageInfo_IPRespose proto.InternalMessageInfo

func (m *IPRespose) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

type LocationReq struct {
	IP                   string   `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocationReq) Reset()         { *m = LocationReq{} }
func (m *LocationReq) String() string { return proto.CompactTextString(m) }
func (*LocationReq) ProtoMessage()    {}
func (*LocationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_947145fe71e22c38, []int{3}
}

func (m *LocationReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LocationReq.Unmarshal(m, b)
}
func (m *LocationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LocationReq.Marshal(b, m, deterministic)
}
func (m *LocationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocationReq.Merge(m, src)
}
func (m *LocationReq) XXX_Size() int {
	return xxx_messageInfo_LocationReq.Size(m)
}
func (m *LocationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LocationReq.DiscardUnknown(m)
}

var xxx_messageInfo_LocationReq proto.InternalMessageInfo

func (m *LocationReq) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

type LocationResponse struct {
	Location             string   `protobuf:"bytes,1,opt,name=Location,proto3" json:"Location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocationResponse) Reset()         { *m = LocationResponse{} }
func (m *LocationResponse) String() string { return proto.CompactTextString(m) }
func (*LocationResponse) ProtoMessage()    {}
func (*LocationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_947145fe71e22c38, []int{4}
}

func (m *LocationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LocationResponse.Unmarshal(m, b)
}
func (m *LocationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LocationResponse.Marshal(b, m, deterministic)
}
func (m *LocationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocationResponse.Merge(m, src)
}
func (m *LocationResponse) XXX_Size() int {
	return xxx_messageInfo_LocationResponse.Size(m)
}
func (m *LocationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LocationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LocationResponse proto.InternalMessageInfo

func (m *LocationResponse) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func init() {
	proto.RegisterType((*StreamBytes)(nil), "streamservice.StreamBytes")
	proto.RegisterType((*DomainReq)(nil), "streamservice.DomainReq")
	proto.RegisterType((*IPRespose)(nil), "streamservice.IPRespose")
	proto.RegisterType((*LocationReq)(nil), "streamservice.LocationReq")
	proto.RegisterType((*LocationResponse)(nil), "streamservice.LocationResponse")
}

func init() { proto.RegisterFile("streamservice.proto", fileDescriptor_947145fe71e22c38) }

var fileDescriptor_947145fe71e22c38 = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0xdb, 0x4a, 0xc3, 0x40,
	0x10, 0xcd, 0x16, 0x29, 0x66, 0x6a, 0x8b, 0x8c, 0x20, 0x65, 0x45, 0xd4, 0xf5, 0xa5, 0x4f, 0x41,
	0xf4, 0x0b, 0x94, 0x80, 0x44, 0x04, 0xc3, 0xf6, 0x0b, 0xd6, 0x32, 0x0f, 0x81, 0xb6, 0x13, 0x33,
	0x6b, 0xc1, 0xaf, 0xf6, 0x17, 0x84, 0xdd, 0x34, 0xb6, 0x11, 0xfb, 0xb6, 0xe7, 0xc2, 0x72, 0xce,
	0x19, 0x38, 0x13, 0xdf, 0x90, 0x5b, 0x09, 0x35, 0x9b, 0x6a, 0x41, 0x59, 0xdd, 0xb0, 0x67, 0x1c,
	0xef, 0x91, 0xe6, 0x06, 0x46, 0xf3, 0x40, 0x3c, 0x7d, 0x79, 0x12, 0x44, 0x38, 0xca, 0x9d, 0x77,
	0x53, 0x75, 0xad, 0x66, 0x27, 0x36, 0xbc, 0xcd, 0x2d, 0xa4, 0x39, 0xaf, 0x5c, 0xb5, 0xb6, 0xf4,
	0x81, 0xe7, 0x30, 0x8c, 0x20, 0x58, 0x52, 0xdb, 0x22, 0x73, 0x01, 0x69, 0x51, 0x5a, 0x92, 0x9a,
	0x85, 0x70, 0x02, 0x83, 0xa2, 0x6c, 0x0d, 0x83, 0xa2, 0x34, 0x97, 0x30, 0x7a, 0xe5, 0x85, 0xf3,
	0x15, 0x87, 0x3f, 0xfa, 0x72, 0x06, 0xa7, 0xbf, 0xb2, 0xd4, 0xbc, 0x16, 0x42, 0x0d, 0xc7, 0x5b,
	0xae, 0x75, 0x76, 0xf8, 0xfe, 0x5b, 0xc1, 0x38, 0x86, 0x9e, 0xc7, 0x16, 0xf8, 0x02, 0x10, 0x89,
	0xfc, 0xd3, 0x2d, 0x51, 0x67, 0xfb, 0xc5, 0x77, 0x0a, 0xea, 0x03, 0x9a, 0x49, 0x66, 0xea, 0x4e,
	0xe1, 0x23, 0xa4, 0xcf, 0xe4, 0x63, 0x2d, 0x9c, 0xf6, 0xec, 0xdd, 0x10, 0xba, 0xaf, 0x74, 0xed,
	0x4d, 0x82, 0x6f, 0x30, 0xb1, 0x24, 0xbc, 0xdc, 0x6c, 0x23, 0xff, 0x89, 0xb4, 0x33, 0x87, 0xbe,
	0xfa, 0x57, 0x8b, 0x5b, 0x98, 0xe4, 0x7d, 0x18, 0x6e, 0xf7, 0xf0, 0x13, 0x00, 0x00, 0xff, 0xff,
	0xe3, 0x55, 0x90, 0x51, 0xd2, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StreamServiceClient is the client API for StreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamServiceClient interface {
	StreamDual(ctx context.Context, opts ...grpc.CallOption) (StreamService_StreamDualClient, error)
	GetDomain(ctx context.Context, in *DomainReq, opts ...grpc.CallOption) (*IPRespose, error)
	ResolvLocation(ctx context.Context, in *LocationReq, opts ...grpc.CallOption) (*LocationResponse, error)
}

type streamServiceClient struct {
	cc *grpc.ClientConn
}

func NewStreamServiceClient(cc *grpc.ClientConn) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) StreamDual(ctx context.Context, opts ...grpc.CallOption) (StreamService_StreamDualClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamService_serviceDesc.Streams[0], "/streamservice.StreamService/StreamDual", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceStreamDualClient{stream}
	return x, nil
}

type StreamService_StreamDualClient interface {
	Send(*StreamBytes) error
	Recv() (*StreamBytes, error)
	grpc.ClientStream
}

type streamServiceStreamDualClient struct {
	grpc.ClientStream
}

func (x *streamServiceStreamDualClient) Send(m *StreamBytes) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceStreamDualClient) Recv() (*StreamBytes, error) {
	m := new(StreamBytes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) GetDomain(ctx context.Context, in *DomainReq, opts ...grpc.CallOption) (*IPRespose, error) {
	out := new(IPRespose)
	err := c.cc.Invoke(ctx, "/streamservice.StreamService/GetDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) ResolvLocation(ctx context.Context, in *LocationReq, opts ...grpc.CallOption) (*LocationResponse, error) {
	out := new(LocationResponse)
	err := c.cc.Invoke(ctx, "/streamservice.StreamService/ResolvLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamServiceServer is the server API for StreamService service.
type StreamServiceServer interface {
	StreamDual(StreamService_StreamDualServer) error
	GetDomain(context.Context, *DomainReq) (*IPRespose, error)
	ResolvLocation(context.Context, *LocationReq) (*LocationResponse, error)
}

// UnimplementedStreamServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStreamServiceServer struct {
}

func (*UnimplementedStreamServiceServer) StreamDual(srv StreamService_StreamDualServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamDual not implemented")
}
func (*UnimplementedStreamServiceServer) GetDomain(ctx context.Context, req *DomainReq) (*IPRespose, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomain not implemented")
}
func (*UnimplementedStreamServiceServer) ResolvLocation(ctx context.Context, req *LocationReq) (*LocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolvLocation not implemented")
}

func RegisterStreamServiceServer(s *grpc.Server, srv StreamServiceServer) {
	s.RegisterService(&_StreamService_serviceDesc, srv)
}

func _StreamService_StreamDual_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).StreamDual(&streamServiceStreamDualServer{stream})
}

type StreamService_StreamDualServer interface {
	Send(*StreamBytes) error
	Recv() (*StreamBytes, error)
	grpc.ServerStream
}

type streamServiceStreamDualServer struct {
	grpc.ServerStream
}

func (x *streamServiceStreamDualServer) Send(m *StreamBytes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceStreamDualServer) Recv() (*StreamBytes, error) {
	m := new(StreamBytes)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamService_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).GetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/streamservice.StreamService/GetDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).GetDomain(ctx, req.(*DomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_ResolvLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).ResolvLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/streamservice.StreamService/ResolvLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).ResolvLocation(ctx, req.(*LocationReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _StreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "streamservice.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDomain",
			Handler:    _StreamService_GetDomain_Handler,
		},
		{
			MethodName: "ResolvLocation",
			Handler:    _StreamService_ResolvLocation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamDual",
			Handler:       _StreamService_StreamDual_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "streamservice.proto",
}
